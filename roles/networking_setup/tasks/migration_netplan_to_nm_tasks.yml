---
## Reached this point netplan is active -> Migrate to NM

# Ensures that dhclient is still used and DUID is preserved (same client-id == same IP)
- name: Use dhclient instead
  become: true
  community.general.ini_file:
    path: "/etc/NetworkManager/conf.d/dhcp-client.conf"
    section: main
    option: dhcp
    value: "dhclient"
    mode: '0600'

# The file name here is key, as 99 will ensure that only the
# renderer will be overwritten and the interfaces will remain untouched
- name: Set netplan renderer to NetworkManager
  become: true
  ansible.builtin.copy:
    content: "{{ pbi_nstp_netplan_disabling_config }}"
    dest: "{{ pbi_nstp_netplan_config_dir }}/99-network-manager.yaml"
    mode: '0600'

# At this point, generate -> apply: Will fill NM with the proper config for
# each interface, allowing no disconnection/service disrupt
- name: Enable NetworkManager as netplan renderer
  become: true
  ansible.builtin.shell:
    # Perform this in a single shell to avoid disruption
    cmd: >-
      netplan generate &&
      netplan apply &&
      systemctl restart NetworkManager

- name: Find all netplan configuration files for further deletion
  become: true
  register: _pbi_nstp_netplan_post_nm_transition_configs_find
  ansible.builtin.find:
    paths: "{{ pbi_nstp_netplan_config_dir }}"
    patterns: '*.yaml,*.yml'

- name: Remove the existing configuration files to push only our own NM rendering based config
  become: true
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ _pbi_nstp_netplan_post_nm_transition_configs_find.files }}"
  loop_control:
    label: "{{ item.path }}"

# Already disabled, let's delete the already NM managed ifaces (ethernet ones for now)
# Don't try to use 'netplan set' for this. Already tested and deleting the ethernet ifaces
# with that will lend to an invalid yaml. Seems like a bug or something not too well thought.
- name: Set netplan renderer to NetworkManager
  become: true
  ansible.builtin.copy:
    content: "{{ pbi_nstp_netplan_disabling_config }}"
    dest: "{{ pbi_nstp_netplan_config_dir }}/70-network-manager.yaml"
    mode: '0600'

- name: Generate and apply the new config without ethernet interfaces managed by netplan
  become: true
  ansible.builtin.shell:
    # No need to reload/restart NM, as it's config will not change
    cmd: netplan generate && netplan apply
