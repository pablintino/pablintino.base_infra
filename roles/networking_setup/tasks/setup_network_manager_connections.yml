---
- name: Assert that connections references an interface
  ansible.builtin.assert:
    msg: "Connection {{ item.key }} should have mac or iface configured"
    that: ('mac' in item.value) or ('iface' in item.value)
    quiet: true
  loop: "{{ pbi_nstp_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Get connections details
  pablintino.base_infra.nmcli_get_connections:
  register: _pbi_nstp_nm_connections_details

- name: Get devices details
  pablintino.base_infra.nmcli_get_devices:
  register: _pbi_nstp_nm_devices_details

- name: Add interfaces data to the connections if MAC provided
  vars:
    connection_iface: >-
      {{
        _pbi_nstp_nm_devices_details.result |
        dict2items |
        selectattr('value.general_hwaddr', 'defined') |
        selectattr(
            'value.general_hwaddr',
            'regex',
            '^'+ item.value.mac + '$',
            'ignorecase'
        )
      }}
  ansible.builtin.set_fact:
    pbi_network_connections: >-
      {{
        pbi_network_connections |
        default(pbi_nstp_connections) |
        combine(
          {
            item.key: {
              'iface': ((connection_iface | first).value.general_device)
                if connection_iface | length == 1 else omit
            }
          }
          , recursive=True)
      }}
    cacheable: true
  loop: "{{ pbi_nstp_connections | dict2items }}"
  when: >-
    ('iface' not in item.value or item.value.iface == '') and
    ('mac' in item.value and item.value.mac != '')
  loop_control:
    label: "{{ item.key }}"

- name: Add current connection info to connections
  ansible.builtin.set_fact:
    pbi_network_connections: >-
      {{
          pbi_network_connections |
          default(pbi_nstp_connections) |
          combine(
          {
              item.key: {
              'nm_connection_info':
                  (
                    item.value |
                    pablintino.base_infra.nmcli_filter_cconn2nmcliconn(_pbi_nstp_nm_connections_details.result) |
                    default(omit, true)
                  )
              }
          }
          , recursive=True)
      }}
    cacheable: true
  loop: >-
    {{
      pbi_network_connections |
      default(pbi_nstp_connections) |
      dict2items |
      selectattr('value.iface', 'defined')
    }}
  loop_control:
    label: "{{ item.key }}"

- name: Configure connection
  ansible.builtin.include_tasks:
    file: setup_network_manager_single_connection.yml
  loop: "{{ pbi_network_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

# Don't do it individually, as adding a connection may vary other connections (ie, general_default)
- name: Get post-configuration connections details
  pablintino.base_infra.nmcli_get_connections:
    query_device: true
  register: _pbi_nstp_post_config_connections_details

- name: Save new connection statuses
  vars:
    updated_connection_value: >-
      {{
        item.value |
        combine({ 'nm_connection_info': omit }) |
        combine(
          {
            'nm_connection_info': (
              _pbi_nstp_post_config_connections_details.result[item.key]
              if item.key in _pbi_nstp_post_config_connections_details.result
              else omit
            )
          }
        )
      }}
  ansible.builtin.set_fact:
    pbi_network_connections: >-
      {{
        pbi_network_connections |
        combine({ item.key: omit }) |
        combine({ item.key: updated_connection_value })
      }}
    cacheable: true
  loop: "{{ pbi_network_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Refresh network related facts for further usage
  ansible.builtin.setup:
    gather_subset:
      - all_ipv4_addresses
      - all_ipv6_addresses
      - network
      - default_ipv4
      - default_ipv6
