---
- name: Create interfaces dict
  ansible.builtin.set_fact:
    networking_setup_detected_ifaces: >-
      {{
        networking_setup_detected_ifaces | default({}) |
        combine(
          {
            item: hostvars[inventory_hostname][('ansible_%s' | format(item | replace('-','_') ))]
          }
        )
      }}
    cacheable: true
  loop: "{{ ansible_interfaces }}"

- name: Assert that connections references an interface
  ansible.builtin.assert:
    msg: "Connection {{ item.key }} should have mac or iface configured"
    that: ('mac' in item.value) or ('iface' in item.value)
  loop: "{{ networking_setup_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Get connections details
  pablintino.base_infra.nmcli_get_connections:
  register: network_setup_nm_connections_details

- name: Fetch SSH nm connection
  when: "'SSH_CONNECTION' in ansible_env"
  ansible.builtin.set_fact:
    nm_networking_setup_ssh_target_connection: >-
      {{
        ((ansible_env.SSH_CONNECTION | split(' '))[2]) |
        pablintino.base_infra.networking_setup_ip2conn(network_setup_nm_connections_details.result)
      }}

- name: Add interfaces data to the connections
  ansible.builtin.set_fact:
    pbi_network_connections: >-
      {{
        pbi_network_connections |
        default(networking_setup_connections) |
        combine(
          {
            item.key: {
              'iface_info':
                ((
                  networking_setup_detected_ifaces |
                  dict2items |
                  selectattr('value.macaddress', 'defined') |
                  selectattr(
                      'value.macaddress',
                      'equalto',
                      item.value.mac | lower
                  ) |
                  first
                ).value)
                if ('mac' in item.value) else
                (
                  networking_setup_detected_ifaces[item.value['iface']]
                  if ('iface' in item.value) else
                  omit
                )
            }
          }
        , recursive=True)
      }}
    cacheable: true
  loop: "{{ networking_setup_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Add current connection info to connections
  ansible.builtin.set_fact:
    pbi_network_connections: >-
      {{
        pbi_network_connections |
        combine(
          {
            item.key: {
              'nm_connection_info':
                (
                  network_setup_nm_connections_details.result |
                  dict2items |
                  map(attribute='value') |
                  selectattr('connection_interface_name', 'defined') |
                  selectattr(
                      'connection_interface_name',
                      'equalto',
                      item.value.iface_info.device
                  ) | first
                )
                if ('iface_info' in item.value) else
                omit
            }
          }
        , recursive=True)
      }}
    cacheable: true
  loop: "{{ pbi_network_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Configure connection
  ansible.builtin.include_tasks:
    file: configure_connection.yml
  loop: "{{ pbi_network_connections | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

