---
- name: Converge
  hosts: all
  gather_facts: true
  tasks:
    - name: Save the interfaces names for further verification
      vars:
        # Do not trust ansible_facts to determine the ssh config as
        # it varies in consecutive runs as interfaces/conns are added
        mngt_ip_addr: "{{ (ansible_env.SSH_CONNECTION | split(' '))[2]}}"
        ssh_connection: >-
          {{
              hostvars[inventory_hostname].values() |
              selectattr('macaddress', 'defined') |
              selectattr('device', 'defined') |
              selectattr('ipv4.address', 'defined') |
              selectattr('ipv4.address', 'equalto', mngt_ip_addr) |
              first
          }}
        custom_net_ifaces_facts: >-
          {{
            hostvars[inventory_hostname].values() |
            selectattr('macaddress', 'defined') |
            selectattr('device', 'defined') |
            rejectattr('device', 'equalto', ssh_connection.device) |
            rejectattr('device', 'equalto', "lo")
          }}
        module_connections_config:
          molecule:
            type: ethernet
            iface: "{{ ssh_connection.device }}"
            state: up
            ipv4:
              # Test manual GW here since testing in molecule with a GW in the rest of
              # the connections means adding a default route that breaks idempotence
              # as the next run won't be able to pull packages as internet connection
              # is lost due those wrong default connections
              mode: manual
              ip: "{{ ssh_connection.ipv4.address }}/{{ ssh_connection.ipv4.prefix }}"
              gw: "{{ ssh_connection.ipv4.network | ansible.utils.ipmath(1) }}"
              dns:
                - "{{ ssh_connection.ipv4.network | ansible.utils.ipmath(1) }}"
          internal:
            type: ethernet
            iface: "{{ custom_net_ifaces_facts[0].macaddress }}"
            state: up
            ipv4:
              mode: manual
              ip: 10.177.21.40/24
              dns:
                - 8.8.8.8
              disable-default-route: true
          external:
            type: ethernet
            iface: "{{ custom_net_ifaces_facts[1].device }}"
            state: up
            ipv4:
              mode: auto
              dns:
                - 1.1.1.1
              routes:
                - dst: 10.111.111.0/24
                  gw: 10.177.100.100
                  metric: 100
              disable-default-route: true
            ipv6:
              # Vagrant infra doesn't support DHCP. Testing IPv6 statically
              mode: manual
              ip: fd68:4327:d6f9:2240::ab
              dns:
                - fd68:4327:d6f9:2240::01
                - fd68:4327:d6f9:2240::02
              routes:
                - dst: fdb9:3b7a:9813:d59a::/64
                  gw: fd68:4327:d6f9:2240::01
                  metric: 100
              disable-default-route: true
        content:
          pbi_tst_nstp_ifaces:
            internal: "{{ custom_net_ifaces_facts[0].device }}"
            external: "{{ custom_net_ifaces_facts[1].device }}"
            molecule: "{{  ssh_connection.device }}"
          pbi_tst_nstp_connections_config: "{{ module_connections_config }}"
          pbi_tst_nstp_ssh_interface: "{{ ssh_connection.device }}"

      ansible.builtin.copy:
        content: "{{ content | to_nice_yaml }}"
        dest: "/tmp/test-ifaces.yaml"

    # Observed that some VMs may contain inactive connections for
    # devices that are not even present. Try to start from a clean
    # NM state if NM is present
    - name: Check is nm is installed
      shell: command -v nmcli >/dev/null 2>&1
      register: pbi_tst_nstp_prep_nm_exits
      failed_when: false

    - name: Perform NM cleanup
      when: "pbi_tst_nstp_prep_nm_exits.rc == 0"
      block:
        - name: Fetch connections statuses
          ansible.builtin.command:
            cmd: "nmcli -t -f UUID,STATE conn show"
          register: pbi_tst_nstp_connections_statuses

        - name: Clean inactive connections
          vars:
            to_delete_uuids: >-
              {{
                pbi_tst_nstp_connections_statuses.stdout_lines |
                reject("search", "activ") |
                map("split", ":") |
                map("first")
              }}
          become: true
          ansible.builtin.command:
            cmd: "nmcli conn delete {{ item }}"
          loop: "{{ to_delete_uuids }}"
