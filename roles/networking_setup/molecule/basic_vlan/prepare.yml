---
- name: Prepare
  hosts: all
  gather_facts: true
  tasks:
    - name: Save the interfaces names for further verification
      vars:
        # Do not trust ansible_facts to determine the ssh config as
        # it varies in consecutive runs as interfaces/conns are added
        mngt_ip_addr: "{{ (ansible_env.SSH_CONNECTION | split(' '))[2]}}"
        ssh_connection_iface: >-
            {{
                (
                  hostvars[inventory_hostname].values() |
                  selectattr('macaddress', 'defined') |
                  selectattr('device', 'defined') |
                  selectattr('ipv4.address', 'defined') |
                  selectattr('ipv4.address', 'equalto', mngt_ip_addr) |
                  first
                ).device
            }}
        custom_net_ifaces_facts: >-
          {{
            hostvars[inventory_hostname].values() |
            selectattr('macaddress', 'defined') |
            selectattr('device', 'defined') |
            rejectattr('device', 'equalto', ssh_connection_iface) |
            rejectattr('device', 'equalto', "lo")
          }}
        module_connections_config:
          molecule:
            type: ethernet
            iface: "{{ ssh_connection_iface }}"
            state: up
            ipv4:
              mode: auto
          internal:
            type: ethernet
            iface: "{{ custom_net_ifaces_facts[0].macaddress }}"
            state: up
            ipv4:
              mode: auto
          internal-20:
            type: vlan
            iface: "{{ custom_net_ifaces_facts[0].device }}.20"
            state: up
            ipv4:
              mode: manual
              ip: 10.177.20.40/24
              dns:
                - 8.8.8.8
            vlan:
              id: 20
              parent: "{{ custom_net_ifaces_facts[0].device }}"
          external:
            type: vlan
            iface: "{{ custom_net_ifaces_facts[1].device }}.100"
            state: up
            ipv4:
              mode: manual
              ip: 10.177.100.40/24
              routes:
                - dst: 10.222.222.0/24
                  gw: 10.177.100.100
                  metric: 100
              dns:
                - 1.1.1.1
            vlan:
              id: 100
              parent: "{{ custom_net_ifaces_facts[1].macaddress }}"
        content:
          pbi_tst_nstp_ifaces:
            internal: "{{ custom_net_ifaces_facts[0].device }}"
            internal-20: "{{ module_connections_config['internal-20'].iface }}"
            external: "{{ module_connections_config.external.iface }}"
            molecule: "{{  ssh_connection_iface }}"
          pbi_tst_nstp_vlan_ifaces_parents:
            internal-20: "{{ custom_net_ifaces_facts[0].device }}"
            external: "{{ custom_net_ifaces_facts[1].device }}"
          pbi_tst_nstp_connections_config: "{{ module_connections_config }}"
          pbi_tst_nstp_ssh_interface: "{{ ssh_connection_iface }}"

      ansible.builtin.copy:
        content: "{{ content | to_nice_yaml }}"
        dest: "/tmp/test-ifaces.yaml"

    # Observed that some VMs may contain inactive connections for
    # devices that are not even present. Try to start from a clean
    # NM state if NM is present
    - name: Check is nm is installed
      shell: command -v nmcli >/dev/null 2>&1
      register: pbi_tst_nstp_prep_nm_exits
      failed_when: false

    - name: Perform NM cleanup
      when: "pbi_tst_nstp_prep_nm_exits.rc == 0"
      block:
        - name: Fetch connections statuses
          ansible.builtin.command:
            cmd: "nmcli -t -f UUID,STATE conn show"
          register: pbi_tst_nstp_connections_statuses

        - name: Clean inactive connections
          vars:
            to_delete_uuids: >-
              {{
                pbi_tst_nstp_connections_statuses.stdout_lines |
                reject("search", "activ") |
                map("split", ":") |
                map("first")
              }}
          become: true
          ansible.builtin.command:
            cmd: "nmcli conn delete {{ item }}"
          loop: "{{ to_delete_uuids }}"
